FORMAT: 1A
https://mytrainy.herokuapp.com

# MyTrainy

API per usare la piattaforma MyTrainy, progetto di Ingengeria del Software UniTN 2022

## Registrazione [/api/v1/users]

### Registrazione di un nuovo utente [POST]
Due tipologie:
* atleta
* allenatore

Crea un nuovo utente che può accedere alla piattaforma. 
In base alla tipologia di utente, egli potrà eseguire tutte le operazioni che gli sono concesse.

+ Request (application/json)

    + Attributes
        - email (string, required) - Email dell'utente
        - password (string, required) - Password scelta dall'utente 
        - userType (string, required) - Tipologia di utente da selezionare

+ Response 200

    Utente creato
    
    + Body
            
            {
                "success": "true"
                "email": "user.email"
                "id": "userId"
                "self": ""api/v1/users" + userId"
            }

+ Response 400

    Ritornato se la richiesta è errata : il parametro email è vuoto o scritto in formato errato.
    
    + Body
        
            {
                "error": "'The field "email" must be a non-empty string, in email format'"
            }

+ Response 500

    Ritorna se la email esiste già
    
    + Body
        
            {
                "error": "'The email already exists'"
            }

## Autenticazione [/api/v1/authentications]

### Autenticazione utente [POST]

All'inserimento delle credenziali dell'utente, si va a cercare l'esistenza di esso nel DataBase e si controlla la correttezza della password per poter effettuare il login.
    
+ Request (application/json)

    + Body 
        
            {
                "email": "user.email"
                "password": "user.password"
            }
            

+ Response 400 

    Ritorna se l'utente non viene trovato
    
    + Body
            
            {
                "success": "false"
                "message": "'Authentication failed. User not found'"
            }
            
+ Response 401

    Ritorna se l'utente ha inserito la password sbagliata.
    
    + Body
            
            {
                "success": "false"
                "message": "'Authentication failed. Wrong password'"
            }
            
+ Response 200

    Login avvenuto
    
    + Body
    
            {
                "success": "true"
                "message": "'Enjoy your token!"
                "token": "token"
                "email": "user.email"
                "id": "user.id"
                "self": ""api/v1/" + user._id"
            }

## Metodo per il recupero schede di allenamento dell'utente [/api/v1/userCards]

### Ritorna tutte le schede di un utente [GET] 

Richiede al database tutte le schede di allenamento dell'utente autenticato, sfruttando il campo 'userId' negli attributi della scheda, controllando che corrisponda all'id dell'utente. 

+ Request (application/json)

    + Parameters
    
        + userId - userID

+ Response 404

    Ritorna se non vengono trovate schede per l'utente.
    
    + Body
    
            {
                "message": "'No card for user with id:' + req.params"
            }
    
+ Response 200

   Query a buon fine 
   
   + Body
    
            {
                "self": "'api/v1/card/' + dbEntry.id"
                "title": "dbEntry.title"
                "sport": "dbEntry.sport"
                "date": "dbEntry.date"
            }

## Metodo per la creazione della scheda di allenamento [/api/v1/card/:userId]

### Creazione di una nuova scheda [POST]

L'utente crea una nuova scheda e viene aggiornato il database.

+ Request (application/json)

    + Attributes
        - userId (string, required) - Id dell'utente 
        - title (string, required) - Titolo della scheda
        - sport (string, required) - Tipologia della scheda 
        - date (string, required) - Data
        - comment (string) - Commento

+ Response 500

    Ritorna se l'utente non è ancora loggato nel sistema.
    
    + Body
    
            {
                "message": "'No logged user yet'"
            }

+ Response 200
    
    Query a buon fine

    + Body 
    
            {
                "self": "'/api/v1/card/' + dbEntry.id"
                "title": "dbEntry.title"
                "sport": "dbEntry.sport"
                "date": "dbEntry.date"
            }

## Metodi delle singole schede di allenamento [/api/v1/card/:id]

### Ritorna una scheda nello specifico [GET]

Richiede al database una scheda specifica selezionata dall'utente.

+ Request (application/json)

    + Parameters
        
         + id - cardID

+ Response 404
    
    Ritorna se non esiste una card con quello specifico id.
    
    + Body 
    
            {
                "message": "''No card with id : ${cardID}'"
            }
    
+ Response 200

    Query a buon fine
    
    + Body 
    
            {
                "id": "id"
                "title": "title"
                "sport": "sport"
                "date": "date"
                "comment": "comment"
            }

### Modifica di una scheda [PATCH]

L'utente modifica una scheda e viene aggiornato il database.

+ Request (application/json)

    + Parameters
    
        + id - cardID
    
+ Response 404

    Ritorna se non esiste una scheda con quel dato id. 
    
    + Body 
            
            { 
                "message": "'No card with id : ${cardID'"
            }
        
+ Response 200
    
    Query a buon fine

    + Body 
    
            {
                "success": "true"
            }

### Cancellazione di una scheda [DELETE]

L'utente cancella una scheda e viene aggioranto il database. 

+ Request (application/json)

    + Parameters
    
        + id - cardID

+ Response 404

    Ritorna se non esiste una scheda con quel dato id.
    
    + Body 
            
            { 
                "message": "'No card with id : ${cardID'"
            }
        
+ Response 200
    
    Query a buon fine

    + Body 
    
            {
                "success": "true"
            }